//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `avatar.jpg`.
    static let avatarJpg = Rswift.FileResource(bundle: R.hostingBundle, name: "avatar", pathExtension: "jpg")
    /// Resource file `me.jpeg`.
    static let meJpeg = Rswift.FileResource(bundle: R.hostingBundle, name: "me", pathExtension: "jpeg")
    
    /// `bundle.url(forResource: "avatar", withExtension: "jpg")`
    static func avatarJpg(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.avatarJpg
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "me", withExtension: "jpeg")`
    static func meJpeg(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.meJpeg
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 2 images.
  struct image {
    /// Image `avatar.jpg`.
    static let avatarJpg = Rswift.ImageResource(bundle: R.hostingBundle, name: "avatar.jpg")
    /// Image `me.jpeg`.
    static let meJpeg = Rswift.ImageResource(bundle: R.hostingBundle, name: "me.jpeg")
    
    /// `UIImage(named: "avatar.jpg", bundle: ..., traitCollection: ...)`
    static func avatarJpg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.avatarJpg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "me.jpeg", bundle: ..., traitCollection: ...)`
    static func meJpeg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.meJpeg, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 4 nibs.
  struct nib {
    /// Nib `JKAboutViewController`.
    static let jkAboutViewController = _R.nib._JKAboutViewController()
    /// Nib `JKCommentCell`.
    static let jkCommentCell = _R.nib._JKCommentCell()
    /// Nib `JKJokeCell`.
    static let jkJokeCell = _R.nib._JKJokeCell()
    /// Nib `JKRefreshView`.
    static let jkRefreshView = _R.nib._JKRefreshView()
    
    /// `UINib(name: "JKAboutViewController", in: bundle)`
    static func jkAboutViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.jkAboutViewController)
    }
    
    /// `UINib(name: "JKCommentCell", in: bundle)`
    static func jkCommentCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.jkCommentCell)
    }
    
    /// `UINib(name: "JKJokeCell", in: bundle)`
    static func jkJokeCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.jkJokeCell)
    }
    
    /// `UINib(name: "JKRefreshView", in: bundle)`
    static func jkRefreshView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.jkRefreshView)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R {
  struct nib {
    struct _JKAboutViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "JKAboutViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _JKCommentCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "JKCommentCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> JKCommentCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? JKCommentCell
      }
      
      fileprivate init() {}
    }
    
    struct _JKJokeCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "JKJokeCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> JKJokeCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? JKJokeCell
      }
      
      fileprivate init() {}
    }
    
    struct _JKRefreshView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "JKRefreshView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> JKRefreshView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? JKRefreshView
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard {
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = ViewController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
